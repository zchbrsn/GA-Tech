# GDB
```bash
Resources:
https://www.exploit-db.com/papers/13205

# Start the binary, core, or process
gdb <Binary>
gdb -c <Core>
gdb -silent `pidof <Binary>`

# Set arguments
set args `perl -e 'print "A" x 5000'`

# Set environment variables
set env PATH=`perl -e 'print "A" x 5000'`

# Change from att to intel
set disassembly-flavor intel

# Check functions
info functions

# Set breakpoints
b main
break strcpy

# Check addresses of libc functions
p system
p puts
p scanf

# Examine
x $ebp		# Examine a register (ebp, eax, etc)
x $eip		# Examine the instruction pointer

# Set values
set *0x<Offset> = <Value>

# Get memory maps
vm

# List breakpoints
info b

# Run the binary
run

# Show register addresses
i r

# Show function disassembly
disas
disas main

# Show stored values on the stack
print $esp

# Check memory address of a location
x		# Examine
g		# 8 bytes
x		# Hexadecimal
$rsp		# Stack pointer
x/gx $rsp

# Check stack frame
info frame

# Check memory addresses of variables for calculating offset distances
p &<Variable 1>
p &<Variable 2>

# pdb cyclic
cyclic <Num>

# GEF Pattern create
pattern create <Num>

r

# Find the offset of the rsp
pattern offset $rsp

pattern create <Offset>

}}}
